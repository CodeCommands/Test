// ========================================
// 1. PLATFORM EVENT DEFINITION
// ========================================
// Create this Platform Event in Setup > Platform Events
// API Name: Case_Comment_Added__e
// Fields:
// - Case_Id__c (Text, 18 characters)
// - Comment_Id__c (Text, 18 characters)
// - User_Id__c (Text, 18 characters)

// ========================================
// 2. TRIGGER HANDLER DOMAIN CLASS
// ========================================
public class CaseCommentDomain extends fflib_SObjectDomain {

```
// Constants
private static final String ECO48C_RECORDTYPE_NAME = 'ECO48C';
private static Id ECO48C_RECORDTYPE_ID;

public CaseCommentDomain(List<CaseComment> records) {
    super(records);
}

public class Constructor implements fflib_SObjectDomain.IConstructable {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
        return new CaseCommentDomain(sObjectList);
    }
}

public override void onAfterInsert() {
    publishCaseCommentEvents((List<CaseComment>) Records);
}

/**
 * Get ECO48C Record Type ID (cached)
 */
private static Id getECO48CRecordTypeId() {
    if (ECO48C_RECORDTYPE_ID == null) {
        ECO48C_RECORDTYPE_ID = Schema.SObjectType.Case.getRecordTypeInfosByName()
            .get(ECO48C_RECORDTYPE_NAME)?.getRecordTypeId();
    }
    return ECO48C_RECORDTYPE_ID;
}

/**
 * Publish platform events only for ECO48C Case record type
 */
private void publishCaseCommentEvents(List<CaseComment> comments) {
    if (comments.isEmpty()) return;
    
    // Get ECO48C Record Type ID
    Id eco48cRecordTypeId = getECO48CRecordTypeId();
    if (eco48cRecordTypeId == null) {
        System.debug('ECO48C Record Type not found. Platform events will not be published.');
        return;
    }
    
    // Get parent Case IDs to query their record types
    Set<Id> parentCaseIds = new Set<Id>();
    for (CaseComment comment : comments) {
        parentCaseIds.add(comment.ParentId);
    }
    
    // Query parent Cases to get their record types
    Map<Id, Case> parentCasesMap = new Map<Id, Case>([
        SELECT Id, RecordTypeId 
        FROM Case 
        WHERE Id IN :parentCaseIds
    ]);
    
    // Filter comments for ECO48C Cases only
    List<Case_Comment_Added__e> events = new List<Case_Comment_Added__e>();
    
    for (CaseComment comment : comments) {
        Case parentCase = parentCasesMap.get(comment.ParentId);
        
        // Only publish event if parent Case has ECO48C record type
        if (parentCase != null && parentCase.RecordTypeId == eco48cRecordTypeId) {
            events.add(new Case_Comment_Added__e(
                Case_Id__c = comment.ParentId,
                Comment_Id__c = comment.Id,
                User_Id__c = comment.CreatedById
            ));
        }
    }
    
    // Publish events if any qualify
    if (!events.isEmpty()) {
        List<Database.SaveResult> results = EventBus.publish(events);
        
        // Log any publishing errors
        for (Integer i = 0; i < results.size(); i++) {
            if (!results[i].isSuccess()) {
                System.debug('Error publishing event: ' + results[i].getErrors());
            }
        }
        
        System.debug('Published ' + events.size() + ' platform events for ECO48C Cases');
    } else {
        System.debug('No platform events published - no ECO48C Cases found in this batch');
    }
}
```

}

// ========================================
// 3. TRIGGER
// ========================================
trigger CaseCommentTrigger on CaseComment (
before insert, before update, before delete,
after insert, after update, after delete, after undelete
) {
fflib_SObjectDomain.triggerHandler(CaseCommentDomain.class);
}

// ========================================
// 4. LIGHTNING WEB COMPONENT - CASE DETAIL REFRESH
// ========================================
// caseDetailRefresh.js
import { LightningElement, api, wire } from ‘lwc’;
import { refreshApex } from ‘@salesforce/apex’;
import { getRecord, getFieldValue } from ‘lightning/uiRecordApi’;
import { subscribe, unsubscribe, onError } from ‘lightning/empApi’;
import { ShowToastEvent } from ‘lightning/platformShowToastEvent’;

// Case fields to track
import CASE_ID_FIELD from ‘@salesforce/schema/Case.Id’;
import CASE_RECORDTYPE_ID from ‘@salesforce/schema/Case.RecordTypeId’;
import CASE_LAST_MODIFIED_DATE from ‘@salesforce/schema/Case.LastModifiedDate’;
import CASE_STATUS from ‘@salesforce/schema/Case.Status’;

const FIELDS = [CASE_ID_FIELD, CASE_RECORDTYPE_ID, CASE_LAST_MODIFIED_DATE, CASE_STATUS];

export default class CaseDetailRefresh extends LightningElement {
@api recordId;

```
subscription = {};
channelName = '/event/Case_Comment_Added__e';
wiredCaseResult;
eco48cRecordTypeId;

@wire(getRecord, { recordId: '$recordId', fields: FIELDS })
wiredCase(result) {
    this.wiredCaseResult = result;
    if (result.error) {
        console.error('Error loading case:', result.error);
    } else if (result.data) {
        // Check if this is an ECO48C case and setup subscription accordingly
        this.checkRecordTypeAndSubscribe();
    }
}

connectedCallback() {
    this.registerErrorListener();
    // We'll subscribe after we confirm the record type
}

disconnectedCallback() {
    this.handleUnsubscribe();
}

/**
 * Check if this is ECO48C record type and subscribe only if it is
 */
checkRecordTypeAndSubscribe() {
    if (!this.wiredCaseResult.data) return;
    
    const recordTypeId = getFieldValue(this.wiredCaseResult.data, CASE_RECORDTYPE_ID);
    
    // Get ECO48C Record Type ID
    this.getECO48CRecordTypeId().then(eco48cId => {
        if (recordTypeId === eco48cId) {
            console.log('ECO48C Case detected - subscribing to platform events');
            this.handleSubscribe();
        } else {
            console.log('Non-ECO48C Case - platform event subscription not needed');
            // Optionally show a message or handle differently
        }
    }).catch(error => {
        console.error('Error getting ECO48C Record Type ID:', error);
    });
}

/**
 * Get ECO48C Record Type ID using getRecordTypeInfosByName
 */
async getECO48CRecordTypeId() {
    if (this.eco48cRecordTypeId) {
        return this.eco48cRecordTypeId;
    }
    
    try {
        // Use dynamic approach to get record type ID
        const recordTypeInfo = await import('@salesforce/apex/CaseRecordTypeHelper.getECO48CRecordTypeId');
        this.eco48cRecordTypeId = await recordTypeInfo.default();
        return this.eco48cRecordTypeId;
    } catch (error) {
        // Fallback: hardcode if you know the ID, or use custom metadata
        console.error('Could not dynamically get ECO48C Record Type ID:', error);
        throw error;
    }
}

// Subscribe to platform event
handleSubscribe() {
    const messageCallback = (response) => {
        console.log('Received platform event:', response);
        
        // Check if this event is for the current case
        if (response.data.payload.Case_Id__c === this.recordId) {
            this.handleCaseCommentAdded(response.data.payload);
        }
    };
    
    subscribe(this.channelName, -1, messageCallback).then(response => {
        console.log('Successfully subscribed to channel:', response.channel);
        this.subscription = response;
    }).catch(error => {
        console.error('Error subscribing to channel:', error);
    });
}

// Unsubscribe from platform event
handleUnsubscribe() {
    if (this.subscription && this.subscription.channel) {
        unsubscribe(this.subscription, response => {
            console.log('Unsubscribed from channel:', response.channel);
        });
    }
}

// Register error listener
registerErrorListener() {
    onError(error => {
        console.error('EMP API error:', error);
    });
}

// Handle case comment added event
handleCaseCommentAdded(payload) {
    console.log('Case comment added for ECO48C case:', payload.Case_Id__c);
    
    // Refresh the case record data
    this.refreshCaseData();
    
    // Show toast notification
    this.dispatchEvent(
        new ShowToastEvent({
            title: 'Case Updated',
            message: 'A new comment has been added to this case.',
            variant: 'info'
        })
    );
    
    // Dispatch custom event for parent components
    this.dispatchEvent(new CustomEvent('casecommentadded', {
        detail: {
            caseId: payload.Case_Id__c,
            commentId: payload.Comment_Id__c,
            userId: payload.User_Id__c
        }
    }));
}

// Refresh case data
refreshCaseData() {
    return refreshApex(this.wiredCaseResult)
        .then(() => {
            console.log('Case data refreshed successfully');
        })
        .catch(error => {
            console.error('Error refreshing case data:', error);
        });
}

// Getter for case data
get caseData() {
    return this.wiredCaseResult.data;
}

// Getter for last modified date
get lastModifiedDate() {
    return getFieldValue(this.caseData, CASE_LAST_MODIFIED_DATE);
}

// Getter for case status
get caseStatus() {
    return getFieldValue(this.caseData, CASE_STATUS);
}

// Getter to check if this is ECO48C case
get isECO48CCase() {
    if (!this.caseData || !this.eco48cRecordTypeId) return false;
    const recordTypeId = getFieldValue(this.caseData, CASE_RECORDTYPE_ID);
    return recordTypeId === this.eco48cRecordTypeId;
}
```

}

// ========================================
// 5. LIGHTNING WEB COMPONENT - TEMPLATE
// ========================================
// caseDetailRefresh.html
/*
<template>
<div class="slds-card">
<div class="slds-card__header slds-grid">
<header class="slds-media slds-media_center slds-has-flexi-truncate">
<div class="slds-media__body">
<h2 class="slds-card__header-title">
<span>Case Details (Live Updates)</span>
</h2>
</div>
</header>
</div>
<div class="slds-card__body slds-card__body_inner">
<template if:true={caseData}>
<div class="slds-grid slds-wrap slds-gutters">
<div class="slds-col slds-size_1-of-2">
<div class="slds-form-element">
<label class="slds-form-element__label">Last Modified</label>
<div class="slds-form-element__control">
<lightning-formatted-date-time 
value={lastModifiedDate}
year="numeric"
month="short"
day="2-digit"
hour="2-digit"
minute="2-digit">
</lightning-formatted-date-time>
</div>
</div>
</div>
<div class="slds-col slds-size_1-of-2">
<div class="slds-form-element">
<label class="slds-form-element__label">Case Status</label>
<div class="slds-form-element__control">
<span class="slds-badge slds-badge_lightest">
{caseStatus}
</span>
</div>
</div>
</div>
</div>
</template>
</div>
</div>
</template>
*/

// ========================================
// 6. LIGHTNING WEB COMPONENT - METADATA
// ========================================
// caseDetailRefresh.js-meta.xml
/*

<?xml version="1.0" encoding="UTF-8"?>

<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__RecordPage</target>
    </targets>
    <targetConfigs>
        <targetConfig targets="lightning__RecordPage">
            <objects>
                <object>Case</object>
            </objects>
        </targetConfig>
    </targetConfigs>
</LightningComponentBundle>
*/

// ========================================
// 7. DOMAIN SELECTOR (Optional - for querying)
// ========================================
public class CaseCommentSelector extends fflib_SObjectSelector {

```
public List<Schema.SObjectField> getSObjectFieldList() {
    return new List<Schema.SObjectField> {
        CaseComment.Id,
        CaseComment.ParentId,
        CaseComment.CommentBody,
        CaseComment.CreatedById,
        CaseComment.CreatedDate,
        CaseComment.IsPublished
    };
}

public Schema.SObjectType getSObjectType() {
    return CaseComment.SObjectType;
}

public List<CaseComment> selectByParentId(Set<Id> parentIds) {
    return (List<CaseComment>) Database.query(
        newQueryFactory()
            .setCondition('ParentId IN :parentIds')
            .setOrdering('CreatedDate', fflib_QueryFactory.SortOrder.DESCENDING)
            .toSOQL()
    );
}
```

}

// ========================================
// 8. HELPER CLASS FOR RECORD TYPE
// ========================================
public class CaseRecordTypeHelper {

```
private static final String ECO48C_RECORDTYPE_NAME = 'ECO48C';

@AuraEnabled(cacheable=true)
public static Id getECO48CRecordTypeId() {
    try {
        RecordType eco48cRecordType = [
            SELECT Id 
            FROM RecordType 
            WHERE SObjectType = 'Case' 
            AND Name = :ECO48C_RECORDTYPE_NAME 
            LIMIT 1
        ];
        return eco48cRecordType.Id;
    } catch (QueryException e) {
        System.debug('ECO48C Record Type not found: ' + e.getMessage());
        return null;
    }
}

@AuraEnabled(cacheable=true)
public static Boolean isECO48CCase(Id caseId) {
    try {
        Id eco48cRecordTypeId = getECO48CRecordTypeId();
        if (eco48cRecordTypeId == null) return false;
        
        Case caseRecord = [
            SELECT RecordTypeId 
            FROM Case 
            WHERE Id = :caseId 
            LIMIT 1
        ];
        
        return caseRecord.RecordTypeId == eco48cRecordTypeId;
    } catch (QueryException e) {
        System.debug('Error checking case record type: ' + e.getMessage());
        return false;
    }
}
```

}

// ========================================
// 9. TEST CLASS
// ========================================
@IsTest
private class CaseCommentDomainTest {

```
private static Id ECO48C_RECORDTYPE_ID;
private static Id STANDARD_RECORDTYPE_ID;

@TestSetup
static void setupTestData() {
    // Get Record Type IDs
    List<RecordType> recordTypes = [
        SELECT Id, Name 
        FROM RecordType 
        WHERE SObjectType = 'Case' 
        AND (Name = 'ECO48C' OR Name = 'Standard')
    ];
    
    for (RecordType rt : recordTypes) {
        if (rt.Name == 'ECO48C') {
            ECO48C_RECORDTYPE_ID = rt.Id;
        } else if (rt.Name == 'Standard') {
            STANDARD_RECORDTYPE_ID = rt.Id;
        }
    }
    
    // Create test cases with different record types
    List<Case> testCases = new List<Case>();
    
    // ECO48C Case
    if (ECO48C_RECORDTYPE_ID != null) {
        testCases.add(new Case(
            Subject = 'ECO48C Test Case',
            Status = 'New',
            Origin = 'Web',
            RecordTypeId = ECO48C_RECORDTYPE_ID
        ));
    }
    
    // Standard Case
    testCases.add(new Case(
        Subject = 'Standard Test Case',
        Status = 'New',
        Origin = 'Web',
        RecordTypeId = STANDARD_RECORDTYPE_ID
    ));
    
    insert testCases;
}

@IsTest
static void testCaseCommentTrigger_ECO48C_Case() {
    // Get ECO48C test case
    Case eco48cCase = [
        SELECT Id, RecordTypeId 
        FROM Case 
        WHERE Subject = 'ECO48C Test Case' 
        LIMIT 1
    ];
    
    // Create test comment for ECO48C case
    CaseComment comment = new CaseComment(
        ParentId = eco48cCase.Id,
        CommentBody = 'Test comment for ECO48C case'
    );
    
    Test.startTest();
    insert comment;
    Test.stopTest();
    
    // Verify comment was created
    List<CaseComment> comments = [
        SELECT Id FROM CaseComment 
        WHERE ParentId = :eco48cCase.Id
    ];
    System.assertEquals(1, comments.size(), 'Comment should be created for ECO48C case');
}

@IsTest
static void testCaseCommentTrigger_Standard_Case() {
    // Get Standard test case
    Case standardCase = [
        SELECT Id, RecordTypeId 
        FROM Case 
        WHERE Subject = 'Standard Test Case' 
        LIMIT 1
    ];
    
    // Create test comment for Standard case
    CaseComment comment = new CaseComment(
        ParentId = standardCase.Id,
        CommentBody = 'Test comment for Standard case'
    );
    
    Test.startTest();
    insert comment;
    Test.stopTest();
    
    // Verify comment was created (but platform event should not be published)
    List<CaseComment> comments = [
        SELECT Id FROM CaseComment 
        WHERE ParentId = :standardCase.Id
    ];
    System.assertEquals(1, comments.size(), 'Comment should be created for Standard case');
    // Note: In a real test scenario, you would verify that no platform event was published
}

@IsTest
static void testBulkCommentInsertion() {
    // Get both test cases
    List<Case> testCases = [
        SELECT Id, RecordTypeId, Subject 
        FROM Case 
        WHERE Subject IN ('ECO48C Test Case', 'Standard Test Case')
    ];
    
    List<CaseComment> comments = new List<CaseComment>();
    
    for (Case testCase : testCases) {
        comments.add(new CaseComment(
            ParentId = testCase.Id,
            CommentBody = 'Bulk test comment for ' + testCase.Subject
        ));
    }
    
    Test.startTest();
    insert comments;
    Test.stopTest();
    
    // Verify comments were created
    List<CaseComment> insertedComments = [
        SELECT Id, ParentId FROM CaseComment 
        WHERE ParentId IN :new List<Id>{testCases[0].Id, testCases[1].Id}
    ];
    System.assertEquals(2, insertedComments.size(), 'Both comments should be created');
}

@IsTest
static void testCaseRecordTypeHelper() {
    Test.startTest();
    
    // Test getting ECO48C Record Type ID
    Id eco48cId = CaseRecordTypeHelper.getECO48CRecordTypeId();
    
    if (ECO48C_RECORDTYPE_ID != null) {
        System.assertEquals(ECO48C_RECORDTYPE_ID, eco48cId, 'Should return correct ECO48C Record Type ID');
        
        // Test ECO48C case check
        Case eco48cCase = [SELECT Id FROM Case WHERE Subject = 'ECO48C Test Case' LIMIT 1];
        Boolean isECO48C = CaseRecordTypeHelper.isECO48CCase(eco48cCase.Id);
        System.assertEquals(true, isECO48C, 'Should identify ECO48C case correctly');
    }
    
    // Test Standard case check
    Case standardCase = [SELECT Id FROM Case WHERE Subject = 'Standard Test Case' LIMIT 1];
    Boolean isStandardECO48C = CaseRecordTypeHelper.isECO48CCase(standardCase.Id);
    System.assertEquals(false, isStandardECO48C, 'Should identify non-ECO48C case correctly');
    
    Test.stopTest();
}
```

}

// ========================================
// 9. APPLICATION CONFIGURATION
// ========================================
// Add to Application class (typically Application.cls)
/*
public class Application {

```
// Configure domain binding
public static final fflib_Application.DomainFactory Domain = 
    new fflib_Application.DomainFactory(
        Application.Selector,
        new Map<SObjectType, Type> {
            CaseComment.SObjectType => CaseCommentDomain.Constructor.class
        }
    );

// Configure selector binding  
public static final fflib_Application.SelectorFactory Selector = 
    new fflib_Application.SelectorFactory(
        new Map<SObjectType, Type> {
            CaseComment.SObjectType => CaseCommentSelector.class
        }
    );
```

}
*/

// ========================================
// DEPLOYMENT STEPS:
// ========================================
/*

1. Create Platform Event in Setup:
- Go to Setup > Platform Events
- Create “Case_Comment_Added__e” with fields:
  - Case_Id__c (Text, 18)
  - Comment_Id__c (Text, 18)
  - User_Id__c (Text, 18)
- Set Publish Behavior: “Publish After Commit”
1. Create ECO48C Record Type (if not exists):
- Go to Setup > Object Manager > Case > Record Types
- Create record type with Name = “ECO48C”
- Note the API Name for reference
1. Deploy Apex Classes:
- CaseCommentDomain.cls
- CaseRecordTypeHelper.cls
- CaseCommentSelector.cls (optional)
- CaseCommentDomainTest.cls
- Update Application.cls with domain bindings
1. Deploy Trigger:
- CaseCommentTrigger.trigger
1. Deploy Lightning Web Component:
- caseDetailRefresh.js
- caseDetailRefresh.html
- caseDetailRefresh.js-meta.xml
1. Configure Lightning Record Page:
- Go to Setup > Lightning App Builder
- Edit Case Record Page OR create new page for ECO48C record type
- Add “Case Detail Refresh” component
- Save and activate
- IMPORTANT: Assign this page layout only to ECO48C record type if desired
1. Test Scenarios:
- Create ECO48C Case -> Add comment -> Verify refresh + toast
- Create Standard Case -> Add comment -> Verify NO refresh/toast
- Test bulk comment insertion with mixed record types
1. Optional Enhancements:
- Create Custom Metadata Types to store record type settings
- Add permission checks for platform event subscription
- Implement custom settings for enabling/disabling feature per profile
  */